// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  FACILITY_OWNER
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum TimeSlotStatus {
  AVAILABLE
  BOOKED
  BLOCKED
  MAINTENANCE
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  googleId      String    @unique
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isBanned      Boolean   @default(false)
  bannedAt      DateTime?
  banReason     String?
  // Relations
  ownedVenues   Venue[]   @relation("VenueOwner")
  bookings      Booking[]
  reviews       Review[]

  @@map("users")
}

model Venue {
  id                 String         @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  description        String?
  address            String
  location           Json? // GeoJSON format: { type: "Point", coordinates: [longitude, latitude] }
  ownerId            String         @db.ObjectId
  amenities          String[]
  photoUrls          String[]
  approvalStatus     ApprovalStatus @default(PENDING)
  rejectionReason    String? // Reason for rejection
  rating             Float?
  reviewCount        Int            @default(0)
  operatingHours     Json
  isActive           Boolean        @default(true)
  resubmissionCount  Int            @default(0) // Track number of resubmissions
  lastResubmissionAt DateTime? // Track last resubmission time for cooldown
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  sports             String[]

  // Relations
  owner   User     @relation("VenueOwner", fields: [ownerId], references: [id])
  courts  Court[]
  reviews Review[]

  @@map("venues")
}

model Court {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  courtType      String
  venueId        String   @db.ObjectId
  pricePerHour   Float
  capacity       Int      @default(10)
  operatingHours Json
  slotConfig     Json? // Available booking time slots configuration
  excludedTimes  Json? // Break periods (lunch, maintenance, etc.)
  slotDuration   Int      @default(60) // Duration in minutes
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  venue     Venue      @relation(fields: [venueId], references: [id])
  timeSlots TimeSlot[]
  bookings  Booking[]

  @@map("courts")
}

model TimeSlot {
  id                      String         @id @default(auto()) @map("_id") @db.ObjectId
  courtId                 String         @db.ObjectId
  date                    DateTime
  startTime               DateTime
  endTime                 DateTime
  price                   Float // Price for this specific time slot
  status                  TimeSlotStatus @default(AVAILABLE)
  isAvailable             Boolean        @default(true) // Computed field for backward compatibility
  isBlockedForMaintenance Boolean        @default(false)
  maxCapacity             Int? // Override court capacity for specific slots
  currentBookings         Int            @default(0) // Track current bookings for this slot
  isPopular               Boolean        @default(false) // Mark popular time slots
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt

  // Relations
  court    Court     @relation(fields: [courtId], references: [id])
  bookings Booking[]

  @@unique([courtId, date, startTime, endTime]) // Prevent duplicate slots
  @@map("timeslots")
}

model Booking {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  userId             String        @db.ObjectId
  courtId            String        @db.ObjectId
  timeSlotId         String?       @db.ObjectId
  bookingDate        DateTime
  startTime          DateTime
  endTime            DateTime
  duration           Int // in minutes
  totalPrice         Float
  playerCount        Int           @default(1) // Number of players for this booking
  status             BookingStatus @default(PENDING)
  paymentStatus      PaymentStatus @default(PENDING)
  paymentId          String? // For payment gateway integration (Razorpay order/payment ID)
  paymentMethod      String? // Payment method used
  paidAt             DateTime? // When payment was completed
  paymentDetails     Json? // Store Razorpay payment response details
  cancellationReason String? // Reason for cancellation if applicable
  isRefundable       Boolean       @default(true) // Whether booking can be refunded
  refundAmount       Float? // Amount refunded if cancelled
  bookingReference   String        @unique // Unique booking reference for users
  notes              String? // Additional notes from user
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id])
  court    Court     @relation(fields: [courtId], references: [id])
  timeSlot TimeSlot? @relation(fields: [timeSlotId], references: [id])

  @@map("bookings")
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  venueId   String   @db.ObjectId
  rating    Int // 1-5 scale
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User  @relation(fields: [userId], references: [id])
  venue Venue @relation(fields: [venueId], references: [id])

  @@map("reviews")
}
