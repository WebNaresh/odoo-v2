// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  FACILITY_OWNER
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  googleId      String    @unique
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  ownedVenues Venue[]   @relation("VenueOwner")
  bookings    Booking[]
  reviews     Review[]

  @@map("users")
}

model Sport {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  category    String
  description String?
  isPopular   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  venues   Venue[]  @relation("VenueSports", fields: [venueIds], references: [id])
  venueIds String[] @db.ObjectId
  courts   Court[]

  @@map("sports")
}

model Venue {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String?
  address        String
  location       Json? // GeoJSON format: { type: "Point", coordinates: [longitude, latitude] }
  ownerId        String         @db.ObjectId
  amenities      String[]
  photoUrls      String[]
  approvalStatus ApprovalStatus @default(PENDING)
  rating         Float?
  reviewCount    Int            @default(0)
  operatingHours Json
  isActive       Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  // Relations
  owner           User     @relation("VenueOwner", fields: [ownerId], references: [id])
  supportedSports Sport[]  @relation("VenueSports", fields: [sportIds], references: [id])
  sportIds        String[] @db.ObjectId
  courts          Court[]
  reviews         Review[]

  @@map("venues")
}

model Court {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  courtType      String
  venueId        String   @db.ObjectId
  sportId        String   @db.ObjectId
  pricePerHour   Float
  operatingHours Json
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  venue     Venue      @relation(fields: [venueId], references: [id])
  sport     Sport      @relation(fields: [sportId], references: [id])
  timeSlots TimeSlot[]
  bookings  Booking[]

  @@map("courts")
}

model TimeSlot {
  id                      String   @id @default(auto()) @map("_id") @db.ObjectId
  courtId                 String   @db.ObjectId
  date                    DateTime
  startTime               DateTime
  endTime                 DateTime
  isAvailable             Boolean  @default(true)
  isBlockedForMaintenance Boolean  @default(false)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  // Relations
  court    Court     @relation(fields: [courtId], references: [id])
  bookings Booking[]

  @@map("timeslots")
}

model Booking {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  userId        String        @db.ObjectId
  courtId       String        @db.ObjectId
  timeSlotId    String        @db.ObjectId
  bookingDate   DateTime
  startTime     DateTime
  endTime       DateTime
  duration      Int // in minutes
  totalPrice    Float
  status        BookingStatus @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  user     User     @relation(fields: [userId], references: [id])
  court    Court    @relation(fields: [courtId], references: [id])
  timeSlot TimeSlot @relation(fields: [timeSlotId], references: [id])

  @@map("bookings")
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  venueId   String   @db.ObjectId
  rating    Int // 1-5 scale
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User  @relation(fields: [userId], references: [id])
  venue Venue @relation(fields: [venueId], references: [id])

  @@map("reviews")
}
